{"version":3,"sources":["assets/bread.JPG","Components/Section.js","Components/Loader.js","Components/Error.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TVShow/TVShowPresenter.js","Routes/TVShow/index.js","Routes/TVShow/TVShowContainer.js","Components/NotFound.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","styled","div","_templateObject","Title","span","_templateObject2","Grid","_templateObject3","Section","_ref","title","children","react_default","a","createElement","Loader_templateObject","Loader","Loader_Container","role","aria-label","Error_templateObject","ErrorText","Error_templateObject2","Error","text","Error_Container","Poster_templateObject","Image","Poster_templateObject2","props","bgUrl","Rating","Poster_templateObject3","ImageContainer","_templateObject4","_templateObject5","Year","_templateObject6","Poster","id","imageUrl","year","rating","isMovie","Link","to","concat","Poster_Container","require","Poster_Title","length","substring","HomePresenter_templateObject","HomePresenter","nowPlaying","upcoming","popular","error","loading","Fragment","Helmet_default","HomePresenter_Container","Components_Section","map","movie","Components_Poster","key","poster_path","release_date","vote_average","Components_Error","api","axios","create","baseURL","params","api_key","language","movieApi","get","movieDetail","append_to_respond","searchMovie","query","encodeURIComponent","tvshowApi","topRated","airingToday","tvDetail","searchTV","HomeContainer","state","data","results","this","setState","_getNowPlaying","_getUpcoming","_getPopular","_this$state","Home_HomePresenter","React","Component","TVShowPresenter_templateObject","TVShowPresenter","TVShowPresenter_Container","tv","original_name","first_air_date","TVShowContainer","_getTopRated","_callee","_ref2","regenerator_default","wrap","_context","prev","next","sent","_this","stop","_getAiringToday","console","log","TVShow_TVShowPresenter","NotFound_templateObject","NotFoundText","NotFound_templateObject2","NotFound","NotFound_Container","SearchPresenter_templateObject","Form","form","SearchPresenter_templateObject2","Input","input","SearchPresenter_templateObject3","SearchPresenter","movieResults","tvResults","searchTitle","handleSubmit","updateTitle","pastTitle","SearchPresenter_Container","onSubmit","placeholder","value","onChange","react","Components_NotFound","SearchContainer","_handleSubmit","event","preventDefault","_getSearchByTitle","_updateTitle","target","_ref3","t0","finish","Search_SearchPresenter","List","ul","Header_templateObject","Item","li","Header_templateObject2","current","Header","header","Header_templateObject3","StyledLink","Header_templateObject4","withRouter","pathname","location","DetailPresenter_templateObject","Backdrop","DetailPresenter_templateObject2","backdropImage","Content","DetailPresenter_templateObject3","Cover","DetailPresenter_templateObject4","Data","DetailPresenter_templateObject5","h3","DetailPresenter_templateObject6","InfoContainer","_templateObject7","Info","_templateObject8","Overview","_templateObject9","Divider","_templateObject10","DetailPresenter","result","DetailPresenter_Container","original_title","backdrop_path","DetailPresenter_Title","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","_default","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","includes","match","push","history","parsedId","parseInt","isNaN","Detail_DetailPresenter","Router","BrowserRouter","Components_Header","Switch","Route","path","exact","component","Home","TVShow","Search","Detail","Redirect","from","globalStyle","createGlobalStyle","GlobalStyles_templateObject","reset","App","GlobalStyles","ReactDOM","render","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.80879e72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bread.f18d8909.JPG\";","//영화,tv들을 섹션별로 렌더링 할 컴포넌트\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Container = styled.div`\r\n    :not(:last-child){\r\n        margin-bottom : 50px;\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    font-size : 14px;\r\n    font-weight : 600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n    margin-top : 25px;\r\n    display : grid;\r\n    grid-template-columns : repeat(auto-fill, 125px);\r\n    grid-gap : 25px;\r\n`;\r\n\r\n//children은 예약어이다. <Section> </Section> 사이에 오는 게 childredn이 된다.\r\nconst Section = ({title, children}) => (\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n    </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    children : PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node,\r\n    ])\r\n}\r\n\r\nexport default Section;\r\n","//loading == true 일때 보여줄 컴포넌트\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    height : 100vh;\r\n    width : 100vw;\r\n    display : flex;\r\n    justify-content : center;\r\n    font-size: 28px;\r\n    margin-top: 20px;\r\n`;\r\n\r\nexport default () => (\r\n    <Container>\r\n        <span role=\"img\" aria-label=\"Loading\">⏰</span>\r\n    </Container>\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width : 100vw;\r\n    display : flex;\r\n    justify-content : center;\r\n`;\r\n\r\nconst ErrorText = styled.span`\r\n    color : red;\r\n    font-weight : 600;\r\n`;\r\n\r\nconst Error = ({text}) => (\r\n    <Container>\r\n        <ErrorText>{text}</ErrorText>\r\n    </Container>\r\n);\r\n\r\nError.propTypes = {\r\n    text : PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Error;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport {Link} from \"react-router-dom\";\r\n//포스터를 그리는 컴포넌트\r\n\r\nconst Container = styled.div`\r\n    font-size : 12px;\r\n`;\r\n\r\n//height를 꼭 줘야 사진이 나온다.\r\nconst Image = styled.div`\r\n    background-image : url(${props => props.bgUrl});\r\n    background-size : cover;\r\n    height : 180px;\r\n    transition : opacity 0.2s linear;\r\n    background-position : center center;\r\n    border-radius : 4px;\r\n`;\r\n\r\n\r\nconst Rating = styled.span`\r\n    position : absolute;\r\n    bottom : 3px;\r\n    right : 2px;\r\n    opacity : 0;\r\n    transition : opacity 0.1s linear;\r\n`;\r\n//& : hover 이렇게 중간에 한 칸씩 띄어쓰면 적용이 안된다.\r\nconst ImageContainer = styled.div`\r\n    &:hover {\r\n        ${Image} {\r\n            opacity : 0.3;\r\n        }\r\n        ${Rating} {\r\n            opacity : 1;\r\n        }\r\n    }\r\n    margin-bottom : 5px;\r\n    position : relative;\r\n`;\r\n// display : block <span/>속성을 블록 속성으로 바꿀 수 있다.\r\nconst Title = styled.span`\r\n    display : block;\r\n    margin-bottom : 2px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    color: rgba(255, 255, 255, 0.5);\r\n    font-size : 10px;\r\n`;\r\n\r\n\r\nconst Poster = ({id, imageUrl, title, year, rating, isMovie}) => (\r\n    <Link to={isMovie ? `/movie/${id}` : `/tvshow/${id}` }>\r\n    <Container>\r\n        <ImageContainer>\r\n            <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/bread.JPG\")}></Image>\r\n            <Rating>\r\n            <span role=\"img\" aria-label=\"rating\">\r\n            ⭐️\r\n            </span>{\" \"}\r\n            {rating}/10\r\n            </Rating>\r\n        </ImageContainer>\r\n\r\n        <Title>{title.length>18 ? `${title.substring(0,18)}...` : title}</Title>\r\n        <Year>{year}</Year>\r\n    </Container>\r\n    </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    year: PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n  };\r\n\r\nexport default Poster;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\"; //페이지의 header를 바꿀 수 있다.\r\n\r\nconst Container = styled.div`\r\n    padding : 20px;\r\n`;\r\n\r\nconst HomePresenter = ({nowPlaying , upcoming, popular, error, loading}) => (\r\n    <>\r\n    <Helmet>\r\n        <title>Happy Movie!</title>\r\n    </Helmet>\r\n        {loading ? <Loader /> : (\r\n    <Container>\r\n        {nowPlaying && nowPlaying.length>0 && \r\n        <Section title=\"Now Playing\">\r\n            {nowPlaying.map(movie=> \r\n                <Poster key={movie.id} \r\n                        id={movie.id}\r\n                        title={movie.title}\r\n                        imageUrl={movie.poster_path} \r\n                        year={movie.release_date && movie.release_date.substring(0,4)} \r\n                        rating={movie.vote_average}\r\n                        isMovie = {true}/>)}\r\n        </Section>}\r\n\r\n        {upcoming && upcoming.length>0 && \r\n        <Section title=\"Upcoming\">\r\n            {upcoming.map(movie =>\r\n                <Poster key={movie.id} \r\n                id={movie.id}\r\n                title={movie.title}\r\n                imageUrl={movie.poster_path} \r\n                year={movie.release_date && movie.release_date.substring(0,4)} \r\n                rating={movie.vote_average}\r\n                isMovie = {true}/>)}\r\n        </Section>}\r\n\r\n        {popular && popular.length &&\r\n        <Section title=\"Popular\">\r\n            {popular.map(movie =>\r\n                <Poster key={movie.id} \r\n                id={movie.id}\r\n                title={movie.title}\r\n                imageUrl={movie.poster_path} \r\n                year={movie.release_date && movie.release_date.substring(0,4)} \r\n                rating={movie.vote_average}\r\n                isMovie = {true}/>)}\r\n        </Section>}\r\n\r\n        {error && <Error text={error}/>}\r\n    </Container>\r\n    )}\r\n    </>\r\n);\r\n\r\n\r\nHomePresenter.propTypes = {\r\n    nowPlaying : PropTypes.array,\r\n    upcoming : PropTypes.array,\r\n    popular : PropTypes.array,\r\n    error : PropTypes.string,\r\n    loading : PropTypes.bool.isRequired,\r\n}\r\nexport default HomePresenter;","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3/\",\r\n    params:{ //params란 ?뒤에 붙는 쿼리 &로 이어짐 ex > ?api_keys=sdfs&language=kor\r\n        api_key : \"1b9e4b85e90b73deb159485a7c7bf064\",\r\n        language : \"en-US\",\r\n    }\r\n})\r\n\r\n\r\nexport const movieApi = { //나중에 사용할 곳에서 import {movieApi} from \"api\" 로 가져올 수 있다.\r\n    nowPlaying : () => api.get(\"movie/now_playing\"), //리턴하는 것들을 객체로 받아서 저장\r\n    upcoming : () => api.get(\"movie/upcoming\"),\r\n    popular : () => api.get(\"movie/popular\"),\r\n    movieDetail : (id) => api.get(`movie/${id}`,\r\n    {\r\n        params:{\r\n            append_to_respond : \"videos\",\r\n        }\r\n    }),\r\n    searchMovie : (title) => api.get(\"search/movie\",{\r\n        params : {\r\n            query : encodeURIComponent(title), //특수문자, 띄어쓰기 등 encode 해줘야함\r\n        }\r\n    })\r\n}\r\n\r\nexport const tvshowApi = {\r\n    topRated : () => api.get(\"tv/top_rated\"),\r\n    popular : () => api.get(\"tv/popular\"),\r\n    airingToday : () => api.get(\"tv/airing_today\"),\r\n    tvDetail : (id) => api.get(`tv/${id}`,\r\n    {\r\n        params:{\r\n            append_to_respond : \"videos\",\r\n        }\r\n    }),\r\n    searchTV : (title) => api.get(\"search/tv\",{\r\n        params : {\r\n            query : encodeURIComponent(title),\r\n        }\r\n    })\r\n}","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { movieApi } from \"api\";\r\n\r\n//movie컨테이너\r\nexport default class extends React.Component {\r\n    state = {\r\n        nowPlaying : null,\r\n        upcoming : null,\r\n        popular : null,\r\n        error : null, //error처리\r\n        loading : true, //loading 상태\r\n    };\r\n    \r\n    //nowPlaying 데이터 가져오기\r\n    async _getNowPlaying() {\r\n        const {data : { results : nowPlaying } } = await movieApi.nowPlaying() //destruction\r\n        this.setState({\r\n            nowPlaying, //변수명 같으면 : 안해줘도 됨\r\n        })\r\n    }\r\n\r\n    //upcoming 데이터 가져오기\r\n    async _getUpcoming() {\r\n        const {data : { results : upcoming } } = await movieApi.upcoming() //destruction\r\n        this.setState({\r\n            upcoming,\r\n        })\r\n    }\r\n\r\n    //popular 데이터 가져오기\r\n    async _getPopular() {\r\n        const {data : { results : popular } } = await movieApi.popular() //destruction\r\n        this.setState({\r\n            popular,\r\n        })\r\n    }\r\n\r\n    //component가 마운트되었을때 api에서 데이터를 가져올 것이다.\r\n    async componentDidMount() {\r\n        try {\r\n            await this._getNowPlaying();\r\n            await this._getUpcoming();\r\n            await this._getPopular();\r\n\r\n            //console.log(this.state) //잘 들어갔는지 확인!\r\n            //throw Error(); //에러를 던져주면 catch()로 들어간다.\r\n\r\n        } catch (error){\r\n            this.setState({\r\n                error : \"Can't load movies\",\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading : false, //최종적으로 loading 값을 false로 만든다.\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {nowPlaying , upcoming, popular, error, loading} = this.state;\r\n        //console.log(this.state);\r\n        return <HomePresenter nowPlaying={nowPlaying} upcoming ={upcoming} popular ={popular} error={error} loading={loading}/>\r\n    }\r\n};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Error from \"Components/Error\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    padding : 20px;\r\n`;\r\n\r\nconst TVShowPresenter = ({topRated, popular, airingToday, error, loading}) => (\r\n    <>\r\n    <Helmet>\r\n        <title>Happy TV!</title>\r\n    </Helmet>\r\n    {loading ? <Loader /> :(\r\n    <Container>\r\n        {topRated && topRated.length>0 && \r\n        <Section title=\"Top Rated\">\r\n            {topRated.map(tv =>\r\n                <Poster key={tv.id} \r\n                id={tv.id}\r\n                title={tv.original_name}\r\n                imageUrl={tv.poster_path} \r\n                year={tv.first_air_date && tv.first_air_date.substring(0,4)} \r\n                rating={tv.vote_average}\r\n                isMovie = {false}/>)}\r\n        </Section>}\r\n        {popular && popular.length>0 && \r\n        <Section title=\"Popular\">\r\n            {popular.map(tv =>\r\n                <Poster key={tv.id} \r\n                id={tv.id}\r\n                title={tv.original_name}\r\n                imageUrl={tv.poster_path} \r\n                year={tv.first_air_date && tv.first_air_date.substring(0,4)} \r\n                rating={tv.vote_average}\r\n                isMovie = {false}/>)}\r\n        </Section>}\r\n        {airingToday && airingToday.length>0 &&\r\n        <Section title=\"Airing Today\">\r\n            {airingToday.map(tv =>\r\n                <Poster key={tv.id} \r\n                id={tv.id}\r\n                title={tv.original_name}\r\n                imageUrl={tv.poster_path} \r\n                year={tv.first_air_date && tv.first_air_date.substring(0,4)} \r\n                rating={tv.vote_average}\r\n                isMovie = {false}/>)}\r\n        </Section>}\r\n        {error && <Error text={error}/>}\r\n    </Container>\r\n    )}\r\n    </>\r\n);\r\n\r\nTVShowPresenter.propTypes ={\r\n    topRated : PropTypes.array,\r\n    popular : PropTypes.array,\r\n    airingToday : PropTypes.array,\r\n    error : PropTypes.string,\r\n    loading : PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default TVShowPresenter;","import TVShowContainer from \"./TVShowContainer\";\r\n\r\nexport default TVShowContainer;","import React from \"react\";\r\nimport TVShowPresenter from \"./TVShowPresenter\";\r\nimport {tvshowApi} from \"api\";\r\n\r\n//tvshow 컨테이너\r\nexport default class extends React.Component {\r\n    state = {\r\n        topRated : null,\r\n        popular : null,\r\n        airingToday : null,\r\n        error : null,\r\n        loading : true,\r\n    }\r\n\r\n    //topRated 데이터 가져오기\r\n    _getTopRated = async ()=> {\r\n        const {data : {results: topRated} }= await tvshowApi.topRated(); //객체 비구조화 할당\r\n        this.setState({\r\n            topRated,\r\n        })\r\n    }\r\n\r\n    //poopular 데이터 가져오기\r\n    async _getPopular() {\r\n        const {data : {results: popular} }= await tvshowApi.popular(); //객체 비구조화 할당\r\n        this.setState({\r\n            popular,\r\n        })\r\n    }\r\n\r\n    //airing 데이터 가져오기\r\n    async _getAiringToday() {\r\n        const {data : {results: airingToday} }= await tvshowApi.airingToday(); //객체 비구조화 할당\r\n        this.setState({\r\n            airingToday,\r\n        })\r\n    }\r\n\r\n    //컴포넌트가 마운트되면 api로부터 데이터를 가져온다.\r\n    async componentDidMount() {\r\n        try{\r\n            //throw Error();\r\n            await this._getTopRated();\r\n            await this._getPopular();\r\n            await this._getAiringToday();\r\n        } catch (error) {\r\n            this.setState({\r\n                error : \"Can't load tvshow\",\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading :false,\r\n            })\r\n        }\r\n        \r\n        console.log(this.state); //잘 들어갔는지 확인!\r\n    }\r\n\r\n    render() {\r\n        const {topRated, popular, airingToday, error, loading} = this.state;\r\n\r\n        return(\r\n            <TVShowPresenter \r\n                topRated={topRated} \r\n                popular={popular} \r\n                airingToday={airingToday}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width : 100vw;\r\n    display : flex;\r\n    justify-content : center;\r\n`;\r\n\r\nconst NotFoundText = styled.span`\r\n    font-weight : 600;\r\n    color : yellow;\r\n`;\r\n\r\nconst NotFound = ({text}) => (\r\n    <Container>\r\n        <NotFoundText>{text}</NotFoundText>\r\n    </Container>\r\n);\r\n\r\nNotFound.propTypes = {\r\n    text : PropTypes.string.isRequired,\r\n}\r\n\r\nexport default NotFound;","import React, {Fragment} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Error from \"Components/Error\";\r\nimport NotFound from \"Components/NotFound\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    padding : 20px;\r\n\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-bottom : 50px;\r\n    width : 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    all : unset;\r\n    font-size : 28px;\r\n    width : 100%;\r\n`;\r\n//확장 : 전에 검색했던 제목을 저장해놓는 pastTitle 만들기 -> 완료!\r\nconst SearchPresenter = ({movieResults, tvResults, loading, error, searchTitle, handleSubmit, updateTitle, pastTitle}) => (\r\n    \r\n    <>\r\n    <Helmet>\r\n        <title>Search Anything</title>\r\n    </Helmet>\r\n    \r\n    <Container>\r\n        <Form onSubmit={handleSubmit}>\r\n            <Input placeholder=\"Search Movies or TVShows...\" value={searchTitle} onChange={updateTitle}></Input>\r\n        </Form>\r\n        {loading ? <Loader /> : (\r\n            <Fragment>\r\n            {movieResults && movieResults.length>0 && \r\n                <Section title=\"Movie Results\">\r\n                    {movieResults.map(movie =>\r\n                         <Poster key={movie.id} \r\n                         id={movie.id}\r\n                         title={movie.title}\r\n                         imageUrl={movie.poster_path} \r\n                         year={movie.release_date && movie.release_date.substring(0,4)} \r\n                         rating={movie.vote_average}\r\n                         isMovie = {true}/>)}\r\n                </Section>}\r\n            {tvResults && tvResults.length>0 &&\r\n                <Section title=\"TV Show Results\">\r\n                    {tvResults.map(tv =>\r\n                        <Poster key={tv.id} \r\n                        id={tv.id}\r\n                        title={tv.original_name}\r\n                        imageUrl={tv.poster_path} \r\n                        year={tv.first_air_date && tv.first_air_date.substring(0,4)} \r\n                        rating={tv.vote_average}\r\n                        isMovie = {false}/>)}\r\n                </Section>}   \r\n            {error && <Error text={error}/>} \r\n            {movieResults && tvResults && movieResults.length === 0 && tvResults.length === 0 && \r\n                <NotFound text={`Nothing found for ${pastTitle}`}/>}\r\n            </Fragment>\r\n        )}\r\n    </Container>\r\n    </>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n    movieResults : PropTypes.array,\r\n    tvResults : PropTypes.array,\r\n    loading : PropTypes.bool.isRequired,\r\n    error : PropTypes.string,\r\n    searchTitle : PropTypes.string, \r\n    handleSubmit : PropTypes.func.isRequired,\r\n    updateTitle : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport {movieApi , tvshowApi} from \"api\";\r\n\r\n//검색메뉴 컨테이너\r\nexport default class extends React.Component {\r\n    state = {\r\n        movieResults : null,\r\n        tvResults : null,\r\n        loading : false, //false일때는 검색 입력폼을 render, true일때는 검색 결과를 보여줄 것이다.\r\n        error : null,\r\n        searchTitle : \"\", //사용자가 검색할 제목 sumit을 하면 setState 해줄 것임\r\n        pastTitle : \"\",\r\n    }\r\n    //presenter에서 submit했을때 넘겨줄 함수\r\n    _handleSubmit = (event) => { //event가 들어옴\r\n        event.preventDefault(); // 이걸 하는 이유는? form 에서 submit이 되면 browser가 event를 받아서 새로고침되며 state를 잃어버린다. \r\n        //우리는 state을 잃지 않고 가져와야하므로 이벤트를 가로채야한다.\r\n        \r\n        const {searchTitle} = this.state;\r\n        this.setState({\r\n            pastTitle : searchTitle,\r\n        })\r\n        if(searchTitle !== \"\"){\r\n            this._getSearchByTitle();\r\n        }\r\n    }\r\n\r\n    _updateTitle = (event) => {\r\n        const {target : {value}} = event\r\n        //console.log(value); //input에 업데이트하는 입력텍스트를 한글자씩 받아옴 \r\n        //-> searchTitle을 setState해줘서 input태그의 value에 넣어줘야 prop으로 넘긴 searchTitle이 보임\r\n        this.setState({\r\n            searchTitle : value,\r\n        }) \r\n    }\r\n\r\n    _getSearchByTitle = async () => {\r\n        const { searchTitle } = this.state;\r\n        this.setState({\r\n            loading :true,\r\n        })\r\n        try {\r\n            //throw Error();\r\n            const {data : {results : movieResults}} = await movieApi.searchMovie(searchTitle);\r\n            const {data : {results : tvResults}} = await tvshowApi.searchTV(searchTitle);\r\n            this.setState({\r\n                movieResults,\r\n                tvResults,\r\n            })\r\n            //console.log(this.state); //잘 들어갔는지 확인!\r\n        } catch(error){\r\n            this.setState({\r\n                error : \"Can't search movie or tvshow\",\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading : false,\r\n            })\r\n        }\r\n        \r\n    }\r\n    \r\n    render() {\r\n        const {movieResults, tvResults, loading, error, searchTitle,pastTitle} = this.state;\r\n\r\n        return(\r\n            <SearchPresenter\r\n                movieResults={movieResults}\r\n                tvResults={tvResults}\r\n                loading={loading}\r\n                error={error}\r\n                searchTitle={searchTitle}\r\n                handleSubmit={this._handleSubmit}  \r\n                updateTitle = {this._updateTitle} \r\n                pastTitle = {pastTitle}\r\n            />\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\n\r\n//styled-components 를 이용해서 조금 더 리액트 답게!\r\n//className 을 랜덤으로 부여해준다 -> 지역화해줌 \r\nconst List = styled.ul`\r\n    display:flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n    width: 80px;\r\n    height: 50px;\r\n    text-align: center;\r\n    border-bottom: 5px solid ${props => props.current ? \"#fbc531\" : \"transparent\"}\r\n    transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  z-index: 10;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n//{Link}를 사용해서 href 링크를 나타내면 링크가 바뀔 때마다 계속 새롭게 화면을 그리지 않는다.\r\nconst StyledLink = styled(Link)` \r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\n//withRouter에 컴포넌트를 감싸면 현재 라우터에 대한 정보를 props를 받을 수 있다. \r\n//withRouter()는 <Router />안에서만 사용할 수 있다.\r\n\r\nexport default withRouter(( {location : {pathname}}) => (\r\n    //현재 라우터의 위치를 받아와서\r\n    <Header>\r\n        <List>\r\n            <Item current={pathname===\"/\"}>\r\n                <StyledLink to=\"/\">HOME</StyledLink>\r\n            </Item>\r\n            <Item current={pathname===\"/tvshow\"}>\r\n                <StyledLink to=\"/tvshow\">TVSHOW</StyledLink>\r\n            </Item>\r\n            <Item current = {pathname===\"/search\"}>\r\n                <StyledLink to=\"/search\">SEARCH</StyledLink>\r\n            </Item>\r\n        </List>\r\n    </Header>\r\n))","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport Loader from \"Components/Loader\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    position : relative;\r\n    height: calc(100vh - 50px);\r\n    width : 100%;\r\n    padding : 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n    background-image : url(${props => props.backdropImage});\r\n    background-size : cover;\r\n    position : absolute;\r\n    height : 100%;\r\n    width : 100%;\r\n    top : 0;\r\n    left : 0;\r\n    z-index : 0;\r\n    filter : blur(3px);\r\n    opacity : 0.5;\r\n`; \r\n\r\nconst Content = styled.div`\r\n    z-index : 1;\r\n    width : 100%;\r\n    height : 100%;\r\n    display : flex;\r\n`; \r\n\r\nconst Cover = styled.div`\r\n    background-image : url(${props => props.imageUrl});\r\n    background-size : cover;\r\n    background-position: center center;\r\n    width : 30%;\r\n    height : 100%;\r\n    position : relative;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n    width : 70%;\r\n    margin-left : 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n    font-size : 50px;\r\n    opacity : 1;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n    font-size : 15px;\r\n    margin : 20px 0px;\r\n`;\r\n\r\nconst Info = styled.span`\r\n    margin : 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n    font-size : 17px;\r\n    line-height : 24px;\r\n    width : 70%;\r\n    opacity: 0.7;\r\n`;\r\n\r\nconst Divider = styled.span`\r\n    margin : 0 3px;\r\n`;\r\n\r\nconst DetailPresenter = ({result , error, loading}) => (\r\n    loading ? (<Loader />) : \r\n    (<Container>\r\n        <Helmet>\r\n            <title>{result.original_title ? result.original_title : result.original_name } </title>\r\n        </Helmet>\r\n        <Backdrop backdropImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}></Backdrop>\r\n        <Content>\r\n            <Cover imageUrl={ result.poster_path ? `https://image.tmdb.org/t/p/original${result.poster_path}` : require(\"../../assets/bread.JPG\")}></Cover>\r\n            <Data>\r\n                <Title>\r\n                    {result.original_title ? result.original_title : result.original_name}\r\n                </Title>\r\n\r\n                <InfoContainer>\r\n                    <Info>{(result.release_date || result.first_air_date) && result.release_date ? result.release_date.substring(0,4) : result.first_air_date.substring(0,4)}</Info>\r\n                    <Divider>•</Divider> \r\n                    <Info>{(result.runtime || result.episode_run_time) && result.runtime ? result.runtime : result.episode_run_time[0]} min</Info>\r\n                    <Divider>•</Divider>\r\n                    <Info>{result.genres && result.genres.map((genre, index) => \r\n                                                    index === result.genres.length - 1 ? genre.name : `${genre.name} / `)}                                   \r\n                    </Info>\r\n                </InfoContainer>\r\n\r\n                <Overview>\r\n                        {result.overview}\r\n                </Overview>\r\n            </Data>\r\n        </Content>\r\n    </Container>)\r\n);\r\n\r\n\r\nDetailPresenter.propTypes = {\r\n    result : PropTypes.array,\r\n    error : PropTypes.string,\r\n    loading : PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport {movieApi, tvshowApi} from \"api\";\r\n\r\n//선택한 컨텐츠의 세부사항에 대한 컨테이너\r\nexport default class extends React.Component {\r\n\r\n    //생성자\r\n    constructor(props){\r\n        super(props);\r\n        //console.log(props) //url에 대한 정보가 props로 넘어온다.\r\n        const {location : {pathname}} = props;\r\n        this.state = {\r\n            result : null,\r\n            error : null,\r\n            loading : true,\r\n            isMovie : pathname.includes(\"/movie/\"), \r\n        }\r\n    }\r\n\r\n    //컴포넌트가 마운트 되면 url을 분석해야한다. props로 path와 param을 알 수 있다.\r\n    //movie/14 이라면 movie도 가져와야하고 14도 가져와야한다.\r\n    async componentDidMount(){\r\n        const {\r\n            //location : { pathname }, //위 예시에서의 /movie/14이다.\r\n            match : {params : {id}}, //여기서 id가 위 에시에서의 14이다.\r\n            history : {push}, //url을 파라미터로 넘긴 값으로 보내주는 push함수를 가져온다.\r\n        } = this.props;\r\n        const parsedId = parseInt(id);\r\n        if(isNaN(parsedId)){ //id가 숫자가 아니면\r\n            return push(\"/\"); //홈으로 보내준다.\r\n        }\r\n        \r\n        let result = null;\r\n        try{\r\n            const {isMovie} = this.state;\r\n            if(isMovie){ //url이 영화라면\r\n                ({data : result} = await movieApi.movieDetail(parsedId)); //해당 id의 영화 detail 데이터를 가지고 온다.\r\n                //{data : result } = await movieApi.movieDetail(parsedId) //let result와 여기의 result는 달라지게 된다.\r\n            } else {\r\n                ({data : result}= await tvshowApi.tvDetail(parsedId)); // ()로 묶어줘야 let의 result에 대입할 수 있다.\r\n            }\r\n            //console.log(result);\r\n        } catch(error) {\r\n            this.setState({\r\n                error : \"Can't find anything\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                loading : false,\r\n                result,\r\n            })\r\n            console.log(this.state.result)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {result , error, loading} = this.state;\r\n        //console.log(this.props); //Router가 현재 위치에 대한 정보를 props로 준다.     \r\n        return(\r\n            <DetailPresenter result={result} error={error} loading={loading} />\r\n        )\r\n    }\r\n}","import React, {Fragment} from \"react\";\r\nimport {BrowserRouter as Router, Route, Redirect, Switch} from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TVShow from \"Routes/TVShow\";\r\nimport Search from \"Routes/Search\";\r\nimport Header from \"./Header\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\nexport default () => (\r\n    <Router>\r\n        <Fragment>\r\n            <Header />\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Home}></Route>\r\n                <Route path=\"/tvshow\" exact component={TVShow}></Route>\r\n                <Route path=\"/search\" exact component={Search}></Route>\r\n                <Route path=\"/movie/:id\" component={Detail} />\r\n                <Route path=\"/tvshow/:id\" component={Detail} />\r\n                <Redirect from=\"*\" to=\"/\"></Redirect>\r\n            </Switch>\r\n        </Fragment>\r\n    </Router>\r\n)","import {createGlobalStyle} from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\n//전체 앱에 적용될 global style 작성\r\n//App.js에 추가해주었다.\r\nconst globalStyle = createGlobalStyle`\r\n    ${reset};    \r\n    a {\r\n        text-decoration : none;\r\n        color: inherit;\r\n    }\r\n    *{\r\n        box-sizeing: border-box; \r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20, 20, 20, 1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n`\r\n//The CSS box-sizing :border-box property allows us to include the padding and border in an element's total width and height.\r\n\r\nexport default globalStyle;","import React, { Component, Fragment } from 'react';\nimport Router from \"./Router\";\nimport GlobalStyles from \"./GlobalStyles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router />\n        <GlobalStyles /> {/*전체 스타일 적용 */}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}